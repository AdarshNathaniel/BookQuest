<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($location, $scope) {
    var c = this;

    // Function to navigate to extend borrow functionality
    c.extendBorrow = function(borrowSysId) {
        console.log("Extending borrow for Borrow Sys ID:", borrowSysId);
        
        // Adjust the URL and page ID for extending borrow (assuming you have an 'extend' page)
        var portalURL = $location.absUrl().split('?')[0];
        var pageID = 'extend_page'; // Change this to the correct page ID for extending borrow
        var url = portalURL + '?id=' + pageID + '&borrow_sys_id=' + borrowSysId;
        window.location.href = url;
    };

    // Function to load all borrowed books on page load
    c.onLoadLoadAllBorrowBooks = function() {
        // Assuming c.data.borrowedBooks is already populated with all borrowed books
        // This could be fetched from server or set directly in the UI page
    };
};
]]></client_script>
        <controller_as>c</controller_as>
        <css>.book-details-card {
  margin-top: 20px;
}

.card {
  border: 1px solid #ddd;
  border-radius: 8px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  margin-bottom: 20px;
  background-color: #FFFFFF;
}

.card-img-top {
  max-width: 100%;
  height: auto;
  display: block;
  margin: 0 auto; /* Center the image horizontally */
  padding: 20px; /* Add padding around the image */
}

.card-body {
  padding: 20px;
  height: 100%; /* Set a fixed height for the card body */
}

.card-title {
  font-size: 2em; /* Increased size for Plot Summary */
  margin-bottom: 10px;
}

.card-subtitle 
font-size: 1.5em; /* Adjusted size for author */
margin-bottom: 15px;
color: #555;
}

.card-text {
  font-size: 1.2em;
}

.dl-horizontal dt {
  font-size: 1.2em;
  font-weight: bold;
  margin-top: 10px;
  text-align: left; /* Ensure the term is left-aligned */
}

.dl-horizontal dd {
  font-size: 1.2em;
  margin-left: 10px;
  margin-top: 10px;
  text-align: left; /* Ensure the description is left-aligned */
}

/* CSS for the Borrow button */
.btn-primary, {
    padding: 10px 24px; /* Padding adjustment */
    font-size: 14px;
    margin: 0 10px; /* Margin adjustment */
    transition: background-color 0.3s, border-color 0.3s;
    width: 100%; /* Button width adjustment */
    border-radius: 8px;
    background-color: #007bff; /* Primary button color */
    border-color: #007bff;
    color: #fff; /* Text color */
}

.btn-primary:hover {
    background-color: #0056b3; /* Darker color on hover */
    border-color: #0056b3;
}

</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>borrow_details</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>borrow Details</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
    var bookSysId = $sp.getParameter('sys_id');
    console.log("Fetching borrowed book details for Book Sys ID: " + bookSysId);

    var currentUserId = gs.getUserID();
    var borrowedBooks = [];
    data.borrowDetails = [];

    // Create a GlideRecord object for the Borrow table
    var borrowGR = new GlideRecord('x_1383151_bkquest_borrow');

    // Add queries to filter records by the current user ID and the book sys_id
    borrowGR.addQuery('user_id', currentUserId);
    borrowGR.addQuery('book_id', bookSysId); // Assuming book_id field in x_1383151_bkquest_borrow table relates to book sys_id
    borrowGR.query();

    // Iterate through the Borrow records for the current user and specified book sys_id
    while (borrowGR.next()) {
        // Create a GlideRecord object for the Book Definition table
        var bookDefinitionGR = new GlideRecord('x_1383151_bkquest_book');

        // Ensure the book definition record is found
        if (bookDefinitionGR.get(bookSysId)) {
            // Now fetch borrow details using the borrowGR record
            var borrowDetails = fetchBorrowDetails(borrowGR.sys_id.toString());

            // Get the cover image URL
            var coverImageURL = bookDefinitionGR.cover_image ? '/sys_attachment.do?sys_id=' + bookDefinitionGR.cover_image : '';

            // Add the book details to the result array
            borrowedBooks.push({
                borrowSysId: borrowGR.sys_id.toString(),
                borrowId: borrowGR.number.toString(),
                borrowDate: borrowGR.borrow_date.toString(),
                dueDate: borrowGR.due_date.toString(),
                returnedDate: borrowGR.returned_date.toString(),
                daysLate: borrowGR.days_late.toString(),
                fineAmount: borrowGR.fine_amount.toString(),
                finePaidDate: borrowGR.fine_paid_date.toString(),
                title: bookDefinitionGR.title.toString(),
                sys_id: bookDefinitionGR.sys_id.toString(),
                user_id: currentUserId, // Include user_id here
                coverImage: coverImageURL,
                borrowDetails: borrowDetails // Include borrow details
            });
        } else {
            gs.info("Book definition record not found for book Sys ID: " + bookSysId);
        }
    }

    // Log borrowed books details
    console.log("Borrowed Books Details:");
    console.log(borrowedBooks);

    // Return the result to the client
    data.borrowedBooks = borrowedBooks; // Assigning borrowedBooks to data object for client-side usage
})();

// Function to fetch borrow details based on borrow sys_id
function fetchBorrowDetails(borrowSysId) {
    var borrowDetails = [];

    // Create a GlideRecord object for the Borrow table
    var borrowGR = new GlideRecord('x_1383151_bkquest_borrow');
    borrowGR.addQuery('sys_id', borrowSysId); // Query by sys_id to fetch specific borrow details
    borrowGR.query();

    if (borrowGR.next()) {
        // Populate borrow details
        borrowDetails.push({
            borrowId: borrowGR.number.toString(),
            borrowDate: borrowGR.borrow_date.toString(),
            dueDate: borrowGR.due_date.toString(),
            returnedDate: borrowGR.returned_date.toString(),
            daysLate: borrowGR.days_late.toString(),
            fineAmount: borrowGR.fine_amount.toString(),
            finePaidDate: borrowGR.fine_paid_date.toString()
        });
    } else {
        gs.info("Borrow record not found for sys_id: " + borrowSysId);
    }

    return borrowDetails;
}
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>harini.srija</sys_created_by>
        <sys_created_on>2024-06-25 15:00:25</sys_created_on>
        <sys_id>7e7281c1938b0210ef267c5efaba1066</sys_id>
        <sys_mod_count>70</sys_mod_count>
        <sys_name>borrow Details</sys_name>
        <sys_package display_value="BookQuest" source="x_1383151_bkquest">327b26db93250210ef267c5efaba100f</sys_package>
        <sys_policy/>
        <sys_scope display_value="BookQuest">327b26db93250210ef267c5efaba100f</sys_scope>
        <sys_update_name>sp_widget_7e7281c1938b0210ef267c5efaba1066</sys_update_name>
        <sys_updated_by>harini.srija</sys_updated_by>
        <sys_updated_on>2024-07-01 11:06:21</sys_updated_on>
        <template><![CDATA[<div class="container book-details-card">
  <div class="row">
    <div class="col-md-3" ng-repeat="borrowDetails in c.data.borrowDetails">
      <div class="card text-center">
        <div class="card-body">
          <img class="card-img-top img-responsive" ng-src="{{borrowDetails.coverImage}}" alt="{{borrowDetails.title}} cover">
          <h4 class="card-title">{{borrowDetails.title}}</h4>
          <h5 class="card-subtitle text-muted">{{borrowDetails.author}}</h5>
          <!-- Button to extend borrow period -->
          <button type="button" class="btn btn-primary" ng-if="c.data.isBookAvailable" ng-click="c.extendBorrow(borrowDetails.borrowId)">Extend</button>
        </div>
      </div>
    </div>
    <div class="col-md-9">
      <div class="card">
        <div class="card-body">
          <h3 class="card-title">Borrow Details</h3>
          <p class="card-text">Here are the details of your borrowed book.</p>
        </div>
      </div>
      <div class="row">
        <!-- Borrow Information -->
        <div class="col-sm-6" ng-repeat="borrowDetails in c.data.borrowDetails">
          <div class="card h-100">
            <div class="card-body d-flex flex-column">
              <h3>Borrow Information</h3>
              <dl class="dl-horizontal flex-grow-1">
                <dt>Borrow ID:</dt>
                <dd>{{borrowDetails.borrowId}}</dd>
                <dt>Borrow Date:</dt>
                <dd>{{borrowDetails.borrowDate}}</dd>
                <dt>Due Date:</dt>
                <dd>{{borrowDetails.dueDate}}</dd>
                <dt>Returned Date:</dt>
                <dd>{{borrowDetails.returnedDate}}</dd>
              </dl>
            </div>
          </div>
        </div>
        <!-- Fine Details -->
        <div class="col-sm-6" ng-repeat="borrowDetails in c.data.borrowDetails">
          <div class="card h-100">
            <div class="card-body d-flex flex-column">
              <h3>Fine Details</h3>
              <dl class="dl-horizontal flex-grow-1">
                <dt>Days Late:</dt>
                <dd>{{borrowDetails.daysLate}}</dd>
                <dt>Fine Amount:</dt>
                <dd>${{borrowDetails.fineAmount}}</dd>
                <dt>Fine Paid Date:</dt>
                <dd>{{borrowDetails.finePaidDate}}</dd>
              </dl>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<pre>{{c.data.borrowDetails | json}}</pre>
]]></template>
    </sp_widget>
</record_update>
