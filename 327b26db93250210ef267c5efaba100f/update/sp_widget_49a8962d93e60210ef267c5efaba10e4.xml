<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($location, $scope) {
  var c = this;

  // Function to navigate to the detailed book page
  c.openBook = function(sysID) {
    var portalURL = $location.absUrl().split('?')[0];
    var pageID = 'book_details_page_v1'; 
    var url = portalURL + '?id=' + pageID + '&sys_id=' + sysID;
    window.location.href = url;
  };

  // Function to load all books on page load
  c.onLoadLoadAllBooks = function() {
    // Assuming c.data.books is already populated with all books
    // This could be fetched from server or set directly in the UI page
  };
};
]]></client_script>
        <controller_as>c</controller_as>
        <css>.container {
 	margin-top: 0px;
}

/* Box sizing rules */
*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Remove default margin */
body,
h1,
h2,
h3,
h4,
p,
figure,
blockquote,
dl,
dd {
  margin: 0;
}

h2 {
  font-family: sans-serif;
  font-weight: bold;
  margin: 2rem 1rem;
  text-align: center;
  color: #3D52A0; /* Updated color */
  padding-bottom: 20px;
  
}

.bookCarousel {
  display: flex;
  flex-direction: row;
  flex-wrap: nowrap;
  margin-top: 1rem;
  overflow-x: auto;
  -ms-overflow-style: none; 
  scrollbar-width: none; 
  height: fit-content;
}

.bookCarousel::-webkit-scrollbar {
  display: none; /* Hide scrollbar for Chrome, Safari, and Opera */
}

.book {
  padding: 1rem;
  margin: 0 0.5rem; /* Adjust margin for smaller spacing */
  border: 1px dashed black; /* Border color */
  background-color: #3D52A0; /* Background color */
  max-width: 200px; /* Decrease max-width for smaller cards */
  min-width: 200px; /* Ensure a minimum width */
  height: auto; /* Adjust height to auto */
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  border-radius: 8px; /* Rounded corners */
}


.book &gt; * {
  color: white; /* Make book text white */
}

.bookCover {
  width: 100%;
  height: auto;
  flex-shrink: 0;
  flex-grow: 0;
  flex-basis: auto;
}

h4 {
  font-family: sans-serif;
  text-align: center;
  font-weight: bold;
  color: white; /* Make h4 text white */
  flex-shrink: 1;
  flex-grow: 0;
  flex-basis: auto;
  margin: 0;
  padding: 0;
  overflow: hidden; /* Ensure text stays within bounds */
  text-overflow: ellipsis; /* Add ellipsis for overflow text */
  word-wrap: break-word; /* Ensure words wrap properly */
}

.bookAuthor {
  font-family: sans-serif;
  text-align: center;
  color: white; /* Make author text white */
  flex-shrink: 1;
  flex-grow: 0;
  flex-basis: auto;
  margin: 0;
  padding: 0;
  overflow: hidden; /* Ensure text stays within bounds */
  text-overflow: ellipsis; /* Add ellipsis for overflow text */
  word-wrap: break-word; /* Ensure words wrap properly */
}

.book:hover {
    transform: scale(1.05); /* Scale up the card on hover */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Add a subtle box shadow */
    opacity: 0.9;
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>popular_books</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Popular books</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	if (!input) {
		data.books = [];
		var bookGR = new GlideRecordSecure('x_1383151_bkquest_book');
		bookGR.orderBy('title');
		bookGR.setLimit(10); // Limit the number of books to 10
		bookGR.query();

		while (bookGR.next()) {
			var coverImageSysId = bookGR.getValue('cover_image');
			var coverImageUrl = '';

			if (coverImageSysId) {
          var coverImageGR = new GlideRecord('sys_attachment');
          if (coverImageGR.get(coverImageSysId)) {
            coverImageUrl = '/sys_attachment.do?sys_id=' + coverImageSysId;
          }
        } else {
          // Default cover image URL
          coverImageUrl = '/NoBookImage.jpg';
        }

			var authorSysId = bookGR.getValue('author');
			var authorName = '';
			if (authorSysId) {
				var authorGR = new GlideRecord('x_1383151_bkquest_author');
				if (authorGR.get(authorSysId)) {
					authorName = authorGR.getDisplayValue();
				}
			}
			// Assign default value if author name is empty
        if (!authorName) {
          authorName = 'Unknown';
        }

			// Fetch the plot summary from the book record
			var plotSummary = bookGR.getValue('plot_summary') || 'No plot summary available';

			data.books.push({
				'sys_id': bookGR.getUniqueValue(),
				'title': bookGR.getDisplayValue('title'),
				'author': authorName,
				'cover_image': coverImageUrl,
				'plot_summary': plotSummary
			});
		}
	}
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>harini.srija</sys_created_by>
        <sys_created_on>2024-06-02 14:02:26</sys_created_on>
        <sys_id>49a8962d93e60210ef267c5efaba10e4</sys_id>
        <sys_mod_count>78</sys_mod_count>
        <sys_name>Popular books</sys_name>
        <sys_package display_value="BookQuest" source="x_1383151_bkquest">327b26db93250210ef267c5efaba100f</sys_package>
        <sys_policy/>
        <sys_scope display_value="BookQuest">327b26db93250210ef267c5efaba100f</sys_scope>
        <sys_update_name>sp_widget_49a8962d93e60210ef267c5efaba10e4</sys_update_name>
        <sys_updated_by>harini.srija</sys_updated_by>
        <sys_updated_on>2024-07-23 05:24:08</sys_updated_on>
        <template><![CDATA[<div class="container">
  <h2>Popular Books</h2>
  <div class="bookCarousel">
    <div class="book" ng-repeat="book in c.data.books">
      <a ng-click="c.openBook(book.sys_id)">
        <img ng-src="{{book.cover_image}}" alt="{{book.title}} cover" class="bookCover img-responsive"/>
      </a>
      <h4>{{book.title}}</h4>
      <span class="bookAuthor">{{book.author}}</span>
    </div>
  </div>
</div>

<!-- <pre>{{data.books || json}}</pre> -->]]></template>
    </sp_widget>
</record_update>
