<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($location, $scope) {
    var c = this;

    // Function to navigate to the detailed book page
    c.openBook = function(sys_id) {
        console.log(sys_id);
        var portalURL = $location.absUrl().split('?')[0];
        var pageID = 'book_details_page_v1'; 
        var url = portalURL + '?id=' + pageID + '&sys_id=' + sys_id; // Corrected variable name
        window.location.href = url;
    };
  
    // Function to navigate to the borrowed book details page
   c.openBorrowDetails = function(borrowSysId) {
    var portalURL = $location.absUrl().split('?')[0];
    var pageID = 'borrow_details'; // Update with your actual page ID for borrow details
    var url = portalURL + '?id=' + pageID + '&sys_id=' + borrowSysId;
    window.location.href = url;
};

var allBooks = document.getElementById("allBooks");
var filterDropdown = document.getElementById("filterDropdown");
var sortingSelect = document.getElementById("sortingSelect");
var searchInput = document.getElementById("search-input");
var searchResults = document.getElementById("search-results");
var listTitle = document.getElementById("listTitle");

// Function to filter and display books based on their genre and get selected value from the filter dropdown.
var filterBooks = function() {
    var value = filterDropdown.value;

    // Show all books or filter based on genre and load the filtered list.
    if (value === "all") {
        loadBooks(borrowedBooks);
    } else {
        var filteredList = borrowedBooks.filter(function(borrowedBooks) { return borrowedBooks.genre === value; });
        loadborrowedBooks(filteredList);
    }
};

// Function to sort books based on options
var sortBooks = function() {
    var value = sortingSelect.value;
    var sortedBooks = borrowedBooks.slice(); // Create a copy of Books array

    switch (value) {
        case "highToLowRating":
            sortedBooks.sort(function(low, high) { return high.rating - low.rating; });
            break;
        case "lowToHighRating":
            sortedBooks.sort(function(low, high) { return low.rating - high.rating; });
            break;
        case "azTitle":
            sortedBooks.sort(function(a, z) { return a.title.localeCompare(z.title); });
            break;
        case "zaTitle":
            sortedBooks.sort(function(a, z) { return z.title.localeCompare(a.title); });
            break;
        default:
            break;
    }
    loadborrowedBooks(sortedBooks);
};

// Function to handle the search
var handleSearch = function() {
    var searchTerm = searchInput.value.trim().toLowerCase();

    if (searchTerm === "") {
        return;
    }

    var matchingBooks = loadborrowedBooks.filter(function(Books) {
        var title = loadborrowedBooks.title.toLowerCase();
        var author = loadborrowedBooks.author.toLowerCase();
        var genre = loadborrowedBooks.genre.toLowerCase();
        return (
            title.includes(searchTerm) ||
            author.includes(searchTerm) ||
            genre.includes(searchTerm)
        );
    });
    if (matchingBooks.length > 0) {
        loadBooks(matchingBooks);
    } else {
        // Display a message at the top-right corner that disappears after 1.5 seconds
        var messageElement = document.createElement("div");
        messageElement.textContent = "Sorry, I don't have that book :(";
        messageElement.classList.add("message");
        document.body.appendChild(messageElement);

        setTimeout(function () {
            // Remove the message after 1.5 seconds
            document.body.removeChild(messageElement);
        }, 1500);
    }
};

// Apply the filter when the user changes the dropdown selection.
filterDropdown.addEventListener("change", filterBooks);
sortingSelect.addEventListener("change", sortBooks);
searchInput.addEventListener("input", handleSearch);
showShoppingCartButton.addEventListener("click", toggleShoppingCart);

// Load the initial list of books when the page loads.
loadborrowedBooks(Books);



    // Function to load all books on page load
    c.onLoadLoadAllBooks = function() {
        // Assuming c.data.books is already populated with all books
        // This could be fetched from server or set directly in the UI page
    };
	
	
};
]]></client_script>
        <controller_as>c</controller_as>
        <css>* {
    box-sizing: border-box;
}

body {
    margin: 0;
    padding: 0;
    /* background-color: #f9f8eb; */
    background-color: #FAF0E6;
    font-family: Arial, Helvetica, sans-serif
}


#bookList {
    max-width: 1300px;
    margin: 0 auto;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr 1fr;
    grid-gap: 20px;
    padding: 10px;
}
#hero {
    display: flex;
    width: 100%;
    height: 440px;
    background-color:#FAEBD7;
}

#hero-img {
    width: 30%;
    height: 380px;
    margin-left: 20px;
    margin-top: 20px;
}

.ribbon {
  width: 0px;
  height: 200px;
  background-color: transparent;
  position: absolute;
  top: -5px;
  right: 20px;
  border: solid 15px #B13A22;
  border-bottom: solid 15px transparent;
  border-top-left-radius: 5px;
  border-top-right-radius: 5px;
  transition: all 0.2s;
  cursor: pointer;
}

.ribbon:hover {
    height: 350px;
  }

.hero-text {
    display: flex;
    flex-wrap: wrap;
    font-family: 'EB Garamond', serif;
    color: black;
}
.hero-text .booksRecs {
    text-align: center;
    margin-left: 100px;
    font-size: 50px;
    margin-bottom: 0px;
}

#divider {
    margin-left: 375px;
    margin-top: 0px;
    text-align: center;
    padding-bottom: 10px;
}

.blurb {
    font-size: 20px;
    initial-letter: 2;
    margin-bottom: 50px;
    margin-left: 80px;
    width: 85%;
    text-indent: 5px;
}

.blurb::first-letter {
    initial-letter: 1.5;
    padding: 12px;
}

.filter {
    display: flex;
    width: 100%;
    flex-wrap: wrap;
    padding-left: 50px;
    padding-top: 10px;
    padding-bottom: 10px;
    background-color: #808876;
    margin-bottom: 50px;
    font-weight: 525;
}

.filter select {
    margin-left: 20px;
    padding: 10px;
    font-size: 14px;
    background-color: #ffffff;
    border: 2px solid black;
    color: black;
    font-weight: light;
    cursor: pointer;
}

.book-listing {
    width: 90%;
    /* height: 90%; */
    margin-bottom: 30px;
}

.book-listing img {
    width: 100%;
    height: 65%;
}

.book-listing figcaption, .book-listing p {
    text-align: center;
}

.book-listing figcaption {
    font-weight: bold;
    color: #20392C;
    padding-top: 20px;
}

.book-listing p {
    font-style: italic;
}

.caption-wrapper {
    background-color: white;
    padding: 10px;
    display: flex;
    min-height: 170px;
    flex-direction: column;
    flex-wrap: wrap;
    justify-content: center;
}

.book-capt {
    cursor: pointer;
}

.book-capt:hover {
    color: #74A705;
    transition: ease-in-out 0.2s;
    text-decoration: underline;
}

.see-more {
    background-color: #ffffff;
    color: black;
    border: none;
    cursor: pointer;
    /* margin-top: 20px; */
}

.btn-container {
    display: flex;
    border-top: 1px solid grey;
    padding-top: 10px;
}

.btn-text {
    width: 100%;
    margin-top: 10px;
    opacity: 0;
    text-align: center;
}

.take-quiz {
    border: none;
    background-color: #ffffff;
    /* margin-top: 20px; */

}

.take-quiz:hover {
    /* color: #D8FF81; */
    color: #74A705;
    transition: 0.3s ease-out;
    cursor: pointer;
}

.see-more:hover {
    /* color: #D8FF81; */
    color: #74A705;
    transition: 0.3s ease-out;
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>borrowed_books</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Borrowed Books</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	var currentUserId = gs.getUserID();
	var data = {};
	data.borrowedBooks = [];

	// Create a GlideRecord object for the Borrow table
	var borrowGR = new GlideRecord('x_1383151_bkquest_borrow');

	// Add a query to filter records by the current user ID
	borrowGR.addQuery('user_id', currentUserId);
	borrowGR.query();

	// Iterate through the Borrow records for the current user
	while (borrowGR.next()) {
		// Get the Book Instance ID from the Borrow record
		var bookInstanceId = borrowGR.book_id;

		if (!bookInstanceId) {
			continue; // Skip if no book instance ID
		}

		// Create a GlideRecord object for the Book Instance table
		var bookInstanceGR = new GlideRecord('x_1383151_bkquest_book_copy');

		// Ensure the book instance record is found
		if (bookInstanceGR.get(bookInstanceId)) {
			// Get the Book ID from the Book Instance record
			var bookId = bookInstanceGR.title;

			// Create a GlideRecord object for the Book Definition table
			var bookDefinitionGR = new GlideRecord('x_1383151_bkquest_book');

			// Ensure the book definition record is found
			if (bookDefinitionGR.get(bookId)) {
				// Create a GlideRecord object for the Author table
				var authorGR = new GlideRecord('x_1383151_bkquest_author');

				// Ensure the author record is found
				if (authorGR.get(bookDefinitionGR.author)) {
					// Get the cover image URL
					var coverImageURL = bookDefinitionGR.cover_image ? '/sys_attachment.do?sys_id=' + bookDefinitionGR.cover_image : '';

					// Add the book details to the result array
					data.borrowedBooks.push({
						borrowId: borrowGR.number.toString(),
						borrowDate: borrowGR.borrow_date.toString(),
						dueDate: borrowGR.due_date.toString(),
						returnedDate: borrowGR.returned_date.toString(),
						daysLate: borrowGR.days_late.toString(),
						fineAmount: borrowGR.fine_amount.toString(),
						finePaidDate: borrowGR.fine_paid_date.toString(),
						title: bookDefinitionGR.title.toString(),
						author: authorGR.full_name.toString(),
					  sys_id:bookDefinitionGR.sys_id.toString(),
						borrowSysId: borrowGR.sys_id.toString(),
						user_id: currentUserId,
						coverImage: coverImageURL
					});
				}
			}
		}
	}

	return data.borrowedBooks;
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>harini.srija</sys_created_by>
        <sys_created_on>2024-06-04 08:27:35</sys_created_on>
        <sys_id>232fd7c693ee8210ef267c5efaba1049</sys_id>
        <sys_mod_count>238</sys_mod_count>
        <sys_name>Borrowed Books</sys_name>
        <sys_package display_value="BookQuest" source="x_1383151_bkquest">327b26db93250210ef267c5efaba100f</sys_package>
        <sys_policy/>
        <sys_scope display_value="BookQuest">327b26db93250210ef267c5efaba100f</sys_scope>
        <sys_update_name>sp_widget_232fd7c693ee8210ef267c5efaba1049</sys_update_name>
        <sys_updated_by>harini.srija</sys_updated_by>
        <sys_updated_on>2024-07-03 15:14:31</sys_updated_on>
        <template><![CDATA[<div class="buttons">
    <select id="filterDropdown">
      <option value="all">All Genres</option>
      <option value="Fiction">Fiction</option>
      <option value="Science Fiction">Science Fiction</option>
      <option value="Fantasy">Fantasy</option>
      <option value="Horror">Horror</option>
      <option value="Mystery">Mystery</option>
      <option value="Dystopian">Dystopian</option>
    </select>

    <select id="sortingSelect">
      <option value="default">Sort books</option>
      <option value="highToLowRating">High-Low Rating</option>
      <option value="lowToHighRating">Low-High Rating</option>
      <option value="azTitle">Title A-Z</option>
      <option value="zaTitle">Title Z-A</option>
    </select>

  <script src="script.js"></script>

<div class="container">
    <h2 class="h1">My Books</h2> <!-- Title for the book list -->
    <div class="row">
        <div class="borrowedbook-item col-xs-12 col-sm-6 col-md-3 col-lg-3" ng-repeat="book in c.data.borrowedBooks">
            <div class="card">
                <a ng-click="c.openBook(book.sys_id)">
                    <img ng-src="{{book.coverImage}}" alt="{{book.title}} cover" class="book-cover img-responsive">
                </a>
                <h3 class="book-title">{{book.title}}</h3>
                <p class="book-author">{{book.author}}</p>
                <button type="submit" class="btn btn-success" ng-if="book.returnedDate" ng-click="c.openBorrowDetails(book.borrowSysId)">Book Returned</button>
								<button type="submit" class="btn btn-danger" ng-if="book.daysLate > 0 && !book.returnedDate" ng-click="c.openBorrowDetails(book.borrowSysId)">Overdue Book</button>
								<button type="button" class="btn btn-primary" ng-if="book.daysLate == 0 && !book.returnedDate" ng-click="c.openBorrowDetails(book.borrowSysId)">View Borrow Details</button>

            </div>
        </div>
    </div>
</div>
<!-- <pre>{{data.borrowedBooks | json}}</pre> -->
]]></template>
    </sp_widget>
</record_update>
