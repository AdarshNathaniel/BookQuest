<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($location, $scope) {
    var c = this;

    // Initialize with all books data
    c.data = {
        allBooksData: c.data.borrowedBooks, // Populate with borrowedBooks from the server-side script
        borrowedBooks: [] // Initialize with an empty array for filtered books
    };

    // Function to navigate to the detailed book page
    c.openBook = function(sys_id) {
        var portalURL = $location.absUrl().split('?')[0];
        var pageID = 'book_details_page_v1';
        var url = portalURL + '?id=' + pageID + '&sys_id=' + sys_id;
        window.location.href = url;
    };

    // Function to navigate to the borrowed book details page
    c.openBorrowDetails = function(borrowSysId) {
        var portalURL = $location.absUrl().split('?')[0];
        var pageID = 'borrow_details'; // Update with your actual page ID for borrow details
        var url = portalURL + '?id=' + pageID + '&sys_id=' + borrowSysId;
        window.location.href = url;
    };

    // Function to load all borrowed books initially
    c.loadAllBorrowedBooks = function() {
        c.data.borrowedBooks = angular.copy(c.data.allBooksData); // Load all books initially
    };

    // Function to filter and load books based on status
    c.loadFilteredBooks = function(status) {
        if (status === 'All') {
            c.loadAllBorrowedBooks();
        } else {
            c.data.borrowedBooks = c.data.allBooksData.filter(function(book) {
                return book.status === status;
            });
        }
    };

    // Initial load of all borrowed books
    c.loadAllBorrowedBooks();
};
]]></client_script>
        <controller_as>c</controller_as>
        <css>.book-item {
    margin-bottom: 20px;
    display: flex;
    justify-content: center;
}

.card {
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 10px;
    text-align: center;
    background-color: #fff;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    height: 400px; /* Fixed height for uniformity */
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    width: 100%; /* Ensures cards take up full width of column */
    margin-bottom: 30px;
    margin-top: 30px;
    align-items: center;
    transition: transform 0.3s, box-shadow 0.3s; /* Add transition for smooth hover effect */
}

.card:hover {
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); /* Increase shadow on hover */
    transform: scale(1.02); /* Slightly scale up the card */
}

.h1 {
    text-align: center;
    color: white;
    font-weight: bold;
    margin-bottom: 30px;
}

.book-cover {
    max-height: 200px; /* Adjust based on desired cover size */
    width: auto;
    margin: 10px 20px 10px; /* Center the image and add bottom margin */
    border-radius: 10px;
    transition: transform 0.3s, box-shadow 0.3s;
}

.book-cover:hover {
    transform: scale(1.05); /* Slightly scale up the image */
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Add shadow effect */
}

.book-title {
    font-weight: bold;
    font-size: 1.2em;
    margin-top: 10px;
}

.book-author {
    color: #555;
    margin-bottom: 10px; /* Ensure spacing at the bottom */
}

.btn-primary,
.btn-danger,
.btn-success {
    padding: 10px 24px; /* Padding adjustment */
    font-size: 14px;
    margin: 0 10px; /* Margin adjustment */
    transition: background-color 0.3s, border-color 0.3s;
    width: 100%; /* Button width adjustment */
    border-radius: 8px;
}

.btn-primary {
    background-color: #5a9dfb; /* Lighter primary button color */
    border-color: #5a9dfb;
    color: #fff; /* Text color */
}

.btn-primary:hover {
    background-color: #3d78d4; /* Darker color on hover */
    border-color: #3d78d4;
}

.btn-danger {
    background-color: #f78d8d; /* Lighter danger button color */
    border-color: #f78d8d;
    color: #fff; /* Text color */
}

.btn-danger:hover {
    background-color: #d46060; /* Darker color on hover */
    border-color: #d46060;
}

.btn-success {
    background-color: #72d697; /* Lighter success button color */
    border-color: #72d697;
    color: #fff; /* Text color */
}

.btn-success:hover {
    background-color: #50b678; /* Darker color on hover */
    border-color: #50b678;
}

/* Container for filter buttons */
.filter-buttons {
  display: flex;
  justify-content: center; /* Center the buttons horizontally */
  flex-wrap: wrap; /* Allow buttons to wrap to the next line if needed */
  gap: 40px; /* Add spacing between buttons */
  margin-bottom: 20px; /* Add spacing below the button group */
}

/* Button styles */
.button-71 {
  background-color: #3d52a0;
  border: 0;
  border-radius: 56px;
  color: #fff;
  cursor: pointer;
  display: inline-block;
  font-family: system-ui, -apple-system, system-ui, "Segoe UI", Roboto, Ubuntu, "Helvetica Neue", sans-serif;
  font-size: 18px;
  font-weight: 600;
  outline: 0;
  padding: 16px 21px;
  position: relative;
  text-align: center;
  text-decoration: none;
  transition: all .3s;
  user-select: none;
  -webkit-user-select: none;
  touch-action: manipulation;
  margin: 10px; /* Increase margin for more space around each button */
}

.button-71:before {
  content: none; /* Remove the background effect */
}

.button-71:hover {
  box-shadow: rgba(255, 255, 255, .2) 0 3px 15px inset, rgba(0, 0, 0, .1) 0 3px 5px, rgba(0, 0, 0, .1) 0 10px 13px;
  transform: scale(1.05);
}

@media (min-width: 768px) {
  .button-71 {
    padding: 16px 48px;
  }
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>borrowed_books</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Borrowed Books</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	var currentUserId = gs.getUserID();
	data.borrowedBooks = [];

	// Create a GlideRecord object for the Borrow table
	var borrowGR = new GlideRecord('x_1383151_bkquest_borrow');

	// Add a query to filter records by the current user ID
	borrowGR.addQuery('user_id', currentUserId);
	borrowGR.query();

	// Iterate through the Borrow records for the current user
	while (borrowGR.next()) {
		// Check if the book has been returned, is recently borrowed (daysLate == 0), or is overdue (daysLate > 0)
		if (borrowGR.returned_date.nil() && borrowGR.days_late > 0) {
			// Book is overdue
			// Get the Book Instance ID from the Borrow record
			var bookInstanceId = borrowGR.book_id;

			if (!bookInstanceId) {
				continue; // Skip if no book instance ID
			}

			// Create a GlideRecord object for the Book Instance table
			var bookInstanceGR = new GlideRecord('x_1383151_bkquest_book_copy');

			// Ensure the book instance record is found
			if (bookInstanceGR.get(bookInstanceId)) {
				// Get the Book ID from the Book Instance record
				var bookId = bookInstanceGR.title;

				// Create a GlideRecord object for the Book Definition table
				var bookDefinitionGR = new GlideRecord('x_1383151_bkquest_book');

				// Ensure the book definition record is found
				if (bookDefinitionGR.get(bookId)) {
					// Create a GlideRecord object for the Author table
					var authorGR = new GlideRecord('x_1383151_bkquest_author');

					// Ensure the author record is found
					if (authorGR.get(bookDefinitionGR.author)) {
						// Get the cover image URL
						var coverImageURL = bookDefinitionGR.cover_image ? '/sys_attachment.do?sys_id=' + bookDefinitionGR.cover_image : '';

						// Add the book details to the result array
						data.borrowedBooks.push({
							//borrowId: borrowGR.number.toString(),
							borrowDate: borrowGR.borrow_date.toString(),
							dueDate: borrowGR.due_date.toString(),
							returnedDate: borrowGR.returned_date.toString(),
							daysLate: borrowGR.days_late.toString(),
							//fineAmount: borrowGR.fine_amount.toString(),
							//finePaidDate: borrowGR.fine_paid_date.toString(),
							title: bookDefinitionGR.title.toString(),
							author: authorGR.full_name.toString(),
							sys_id: bookDefinitionGR.sys_id.toString(),
							borrowSysId: borrowGR.sys_id.toString(),
							user_id: currentUserId,
							coverImage: coverImageURL,
							status: 'Overdue'
						});
					} else {
						// gs.info("Author record not found for book ID: " + bookId);
					}
				} else {
					// gs.info("Book definition record not found for book instance ID: " + bookInstanceId);
				}
			} else {
				// gs.info("Book instance record not found for ID: " + bookInstanceId);
			}
		} else {
			// Book is either returned or recently borrowed
			// Get the Book Instance ID from the Borrow record
			var bookInstanceId = borrowGR.book_id;

			if (!bookInstanceId) {
				continue; // Skip if no book instance ID
			}

			// Create a GlideRecord object for the Book Instance table
			var bookInstanceGR = new GlideRecord('x_1383151_bkquest_book_copy');

			// Ensure the book instance record is found
			if (bookInstanceGR.get(bookInstanceId)) {
				// Get the Book ID from the Book Instance record
				var bookId = bookInstanceGR.title;

				// Create a GlideRecord object for the Book Definition table
				var bookDefinitionGR = new GlideRecord('x_1383151_bkquest_book');

				// Ensure the book definition record is found
				if (bookDefinitionGR.get(bookId)) {
					// Create a GlideRecord object for the Author table
					var authorGR = new GlideRecord('x_1383151_bkquest_author');

					// Ensure the author record is found
					if (authorGR.get(bookDefinitionGR.author)) {
						// Get the cover image URL
						var coverImageURL = bookDefinitionGR.cover_image ? '/sys_attachment.do?sys_id=' + bookDefinitionGR.cover_image : '';

						// Determine if the book is recently borrowed
						var isRecentlyBorrowed = borrowGR.days_late == 0 && borrowGR.returned_date.nil();

						// Add the book details to the result array
						data.borrowedBooks.push({
							//borrowId: borrowGR.number.toString(),
							borrowDate: borrowGR.borrow_date.toString(),
							dueDate: borrowGR.due_date.toString(),
							returnedDate: borrowGR.returned_date.toString(),
							daysLate: borrowGR.days_late.toString(),
							//fineAmount: borrowGR.fine_amount.toString(),
							//finePaidDate: borrowGR.fine_paid_date.toString(),
							title: bookDefinitionGR.title.toString(),
							author: authorGR.full_name.toString(),
							sys_id: bookDefinitionGR.sys_id.toString(),
							borrowSysId: borrowGR.sys_id.toString(),
							user_id: currentUserId,
							coverImage: coverImageURL,
							status: isRecentlyBorrowed ? 'Recently Borrowed' : 'Returned'
						});
					} else {
						// gs.info("Author record not found for book ID: " + bookId);
					}
				} else {
					// gs.info("Book definition record not found for book instance ID: " + bookInstanceId);
				}
			} else {
				// gs.info("Book instance record not found for ID: " + bookInstanceId);
			}
		}
	}

	// Return the result to the client
	console.log(data.borrowedBooks);

})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>harini.srija</sys_created_by>
        <sys_created_on>2024-06-04 08:27:35</sys_created_on>
        <sys_id>232fd7c693ee8210ef267c5efaba1049</sys_id>
        <sys_mod_count>290</sys_mod_count>
        <sys_name>Borrowed Books</sys_name>
        <sys_package display_value="BookQuest" source="x_1383151_bkquest">327b26db93250210ef267c5efaba100f</sys_package>
        <sys_policy/>
        <sys_scope display_value="BookQuest">327b26db93250210ef267c5efaba100f</sys_scope>
        <sys_update_name>sp_widget_232fd7c693ee8210ef267c5efaba1049</sys_update_name>
        <sys_updated_by>harini.srija</sys_updated_by>
        <sys_updated_on>2024-07-05 13:30:23</sys_updated_on>
        <template><![CDATA[<div class="container">
    <h2 class="h1">My Books</h2> <!-- Title for the book list -->

    <!-- Filter Buttons -->
    <div class="filter-buttons">
        <button type="button" class="button-71 buttonAll" ng-click="c.loadFilteredBooks('All')">All</button>
        <button type="button" class="button-71 buttonReturn" ng-click="c.loadFilteredBooks('Returned')">Returned</button>
        <button type="button" class="button-71 buttonOverdue" ng-click="c.loadFilteredBooks('Overdue')">Overdue</button>
        <button type="button" class="button-71 buttonRecent" ng-click="c.loadFilteredBooks('Recently Borrowed')">Recently Borrowed</button>
    </div>

    <!-- Book List -->
    <div class="row">
        <div class="borrowedbook-item col-xs-12 col-sm-6 col-md-3 col-lg-3" ng-repeat="book in c.data.borrowedBooks">
            <div class="card">
                <a ng-click="c.openBook(book.sys_id)">
                    <img ng-src="{{book.coverImage}}" alt="{{book.title}} cover" class="book-cover img-responsive">
                </a>
                <h3 class="book-title">{{book.title}}</h3>
                <p class="book-author">{{book.author}}</p>
                <button type="submit" class="btn btn-success" ng-if="book.status === 'Returned'" ng-click="c.openBorrowDetails(book.borrowSysId)">Book Returned</button>
                <button type="submit" class="btn btn-danger" ng-if="book.status === 'Overdue'" ng-click="c.openBorrowDetails(book.borrowSysId)">Overdue Book</button>
                <button type="button" class="btn btn-primary" ng-if="book.status === 'Recently Borrowed'" ng-click="c.openBorrowDetails(book.borrowSysId)">View Borrow Details</button>
            </div>
        </div>
    </div>
</div>
<!-- <pre>{{c.data.borrowedBooks | json}}</pre> -->
]]></template>
    </sp_widget>
</record_update>
