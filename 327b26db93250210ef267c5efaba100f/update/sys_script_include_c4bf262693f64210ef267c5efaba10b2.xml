<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_1383151_bkquest.BorrowedBooksUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>BorrowedBooksUtils</name>
        <script><![CDATA[var BorrowedBooksUtils = Class.create();
BorrowedBooksUtils.prototype = {
    initialize: function() {},

    getBorrowedBooks: function() {
        var currentUserId = gs.getUserID();
        var borrowedBooks = [];

        // Create a GlideRecord object for the Borrow table
        var borrowGR = new GlideRecord('x_1383151_bkquest_borrow');

        // Add a query to filter records by the current user ID
        borrowGR.addQuery('user_id', currentUserId);
        borrowGR.query();

        // Iterate through the Borrow records for the current user
        while (borrowGR.next()) {
            // Get the Book Instance ID from the Borrow record
            var bookInstanceId = borrowGR.book_id;

            // Create a GlideRecord object for the Book Instance table
            var bookInstanceGR = new GlideRecord('x_1383151_bkquest_book_copy');

            // Add a query to filter by the Book Instance ID
            bookInstanceGR.get(bookInstanceId);

            // Get the Book ID from the Book Instance record
            var bookId = bookInstanceGR.title;

            // Create a GlideRecord object for the Book Definition table
            var bookDefinitionGR = new GlideRecord('x_1383151_bkquest_book');

            // Add a query to filter by the Book ID
            bookDefinitionGR.get(bookId);

            // Create a GlideRecord object for the Author table
            var authorGR = new GlideRecord('x_1383151_bkquest_author');

            // Add a query to filter by the Author ID
            authorGR.get(bookDefinitionGR.author);

            // Get the cover image URL
            var coverImageURL = bookDefinitionGR.cover_image ? '/sys_attachment.do?sys_id=' + bookDefinitionGR.cover_image : '';

            // Add the book details to the result array
            borrowedBooks.push({
                borrowId: borrowGR.number.toString(),
                borrowDate: borrowGR.borrow_date.toString(),
                dueDate: borrowGR.due_date.toString(),
                returnedDate: borrowGR.returned_date.toString(),
                title: bookDefinitionGR.title.toString(),
                author: authorGR.full_name.toString(),
                publisher: bookDefinitionGR.publisher.toString(),
                dateOfPublication: bookDefinitionGR.date_of_publication.toString(),
                coverImage: coverImageURL
            });
        }

        // Return the result to the client
        return borrowedBooks;
    },

    type: 'BorrowedBooksUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>harini.srija</sys_created_by>
        <sys_created_on>2024-06-18 04:35:15</sys_created_on>
        <sys_id>c4bf262693f64210ef267c5efaba10b2</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>BorrowedBooksUtils</sys_name>
        <sys_package display_value="BookQuest" source="x_1383151_bkquest">327b26db93250210ef267c5efaba100f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="BookQuest">327b26db93250210ef267c5efaba100f</sys_scope>
        <sys_update_name>sys_script_include_c4bf262693f64210ef267c5efaba10b2</sys_update_name>
        <sys_updated_by>harini.srija</sys_updated_by>
        <sys_updated_on>2024-06-18 04:35:46</sys_updated_on>
    </sys_script_include>
</record_update>
