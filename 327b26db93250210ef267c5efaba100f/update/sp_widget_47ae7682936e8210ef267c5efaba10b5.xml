<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function($location, $scope) {
  var c = this;

  c.searchKeyword = '';
  c.filteredBooks = [];

  c.addNewBook = function() {
    $location.search({id: "fn_create_book"});
  };

  c.openBook = function(sysID) {
    var portalURL = $location.absUrl().split('?')[0];
    var pageID = 'book_details_page_v1';
    var url = portalURL + '?id=' + pageID + '&sys_id=' + sysID;
    window.location.href = url;
  };

  // Function to filter books based on searchKeyword
  c.search = function() {
    if(c.searchKeyword.trim() === '') {
      c.filteredBooks = c.data.books; // Show all books if searchKeyword is empty
    } else {
      c.filteredBooks = c.data.books.filter(function(book) {
        return book.title.toLowerCase().includes(c.searchKeyword.toLowerCase());
      });
    }
  };

  // Watch for changes in searchKeyword to dynamically update filteredBooks
  $scope.$watch('c.searchKeyword', function(newVal, oldVal) {
    if (newVal !== oldVal) {
      c.search();
    }
  });

  // Load all books initially
  c.filteredBooks = c.data.books;
};
]]></client_script>
        <controller_as>c</controller_as>
        <css>.search-container {
  text-align: center;
  margin-top: 50px;
  margin-bottom: 30px;
}

.search-title {
  font-size: 2.5em; /* Slightly increased font size */
  margin-bottom: 20px;
  color: white;
}

.search-form {
  display: flex;
  justify-content: center;
  align-items: center;
}

.form-group {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  max-width: 800px; /* Adjust this value to control the max width */
}

.search-input {
  width: 90%; /* Adjusted width to ensure it's large but not overflowing */
  padding: 15px; /* Increased padding for larger input field */
  font-size: 1.5em; /* Increased font size */
  border-radius: 5px 0 0 5px; /* Added border-radius to the left side only */
  border: 1px solid #ccc; /* Light border for better visibility */
  border-right: none; /* Remove right border to seamlessly connect with button */
}

.search-button {	
  padding: 15px 30px; /* Increased padding for larger button */
  font-size: 1.5em; /* Increased font size */
  border-radius: 0 5px 5px 0; /* Matching border-radius with input field */
  background-color: #3D5280; /* Primary color for button */
  color: white; /* White text color */
  border: 1px solid #3D5280; /* Matching border color */
  height: 18px; /* Adjust the height to match the input field */
  display: flex;
  align-items: center;
  margin-top: -15px;
}

.search-button:hover {
  background-color: #24334C /* Darker shade on hover */
}

.cards {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 20px;
}

/* Styles for each card */
.card {
  width: 100%; /* Set width to 100% to ensure one card per row */
  max-width: 800px; /* Set maximum width for better layout */
  margin-bottom: 20px;
  padding: 20px; /* Add padding to the card */
  background-color: #fff;
}

.card:hover {
	transform: scale(1.02);
}

.card__content {
  display: flex;
  align-items: center;
}

.card__img {
  flex: 1; /* Allow the image to grow to fill the available space */
  height: auto; /* Allow the image to resize with the container */
  max-height: 200px; /* Maximum height for the image */
  margin-right: 20px; /* Add margin for spacing between image and text */
  padding: 10px; /* Add padding between the image and the card */
}

/* Styles for the information section of each card */
.card__info {
  flex: 2; /* Adjust the width of the info section */
  padding-left: 20px; /* Add padding to separate content from the edge of the card */
}

.card__title {
  font-size: 1.5em; /* Adjust the font size */
  font-weight: bold; /* Make the title bold */
  margin-bottom: 10px; /* Add margin below the title */
}

/* Styles for the author name */
.card__author {
  font-size: 1.2em; /* Adjust the font size */
  color: #555; /* Change the text color */
  margin-bottom: 10px; /* Add margin below the author name */
}

/* Styles for the plot summary */
.card__summary {
  font-size: 1em;
  margin-top: 5px; /* Add margin to separate the plot summary from the author name */
}

</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>book_search_widget</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Book Search Widget</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	if (!input) {
		data.books = [];
		var bookGR = new GlideRecordSecure('x_1383151_bkquest_book');
		bookGR.orderBy('title');
		bookGR.query();

		while (bookGR.next()) {
			var coverImageSysId = bookGR.getValue('cover_image');
			var coverImageUrl = '';

			// Construct cover image URL
			if (coverImageSysId) {
					var coverImageGR = new GlideRecord('sys_attachment');
					if (coverImageGR.get(coverImageSysId)) {
							coverImageUrl = '/sys_attachment.do?sys_id=' + coverImageSysId;
					}
			} else {
					// Default cover image URL
					coverImageUrl = '/NoBookImage.jpg'; // Adjust the path to match your actual image location
			}


			// Retrieve author name
			var authorSysId = bookGR.getValue('author');
			var authorName = '';
			if (authorSysId) {
					var authorGR = new GlideRecord('x_1383151_bkquest_author');
					if (authorGR.get(authorSysId)) {
							authorName = authorGR.getDisplayValue();
					}
			}
			// Assign default value if author name is empty
			if (!authorName) {
					authorName = 'Unknown';
			}


			// Fetch the plot summary from the book record
			// Fetch the plot summary from the book record
			var plotSummary = bookGR.getValue('plot_summary') || 'No plot summary available';


			data.books.push({
				'sys_id': bookGR.getUniqueValue(),
				'title': bookGR.getDisplayValue('title'),
				'author': authorName,
				'cover_image': coverImageUrl,
				'plot_summary': plotSummary,
				
			});
		}
	}

	if (input) {
		// Add server-side functionality here if needed
	}
})();
]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>adarsh.nathaniel</sys_created_by>
        <sys_created_on>2024-06-04 06:05:33</sys_created_on>
        <sys_id>47ae7682936e8210ef267c5efaba10b5</sys_id>
        <sys_mod_count>60</sys_mod_count>
        <sys_name>Book Search Widget</sys_name>
        <sys_package display_value="BookQuest" source="x_1383151_bkquest">327b26db93250210ef267c5efaba100f</sys_package>
        <sys_policy/>
        <sys_scope display_value="BookQuest">327b26db93250210ef267c5efaba100f</sys_scope>
        <sys_update_name>sp_widget_47ae7682936e8210ef267c5efaba10b5</sys_update_name>
        <sys_updated_by>harini.srija</sys_updated_by>
        <sys_updated_on>2024-07-09 07:38:13</sys_updated_on>
        <template><![CDATA[<div class="search-container">
  <h1 class="search-title">Ready to start your Quest?</h1>
  <form class="search-form" role="search" ng-submit="c.search()">
    <div class="form-group">
      <input type="text" class="form-control search-input" ng-model="c.searchKeyword" ng-change="c.search()" placeholder="Search books">
    </div>
    <button type="submit" class="btn btn-default search-button">
      <span class="glyphicon glyphicon-search" aria-hidden="true"></span>
    </button>
  </form>
</div>

<div class="cards">
  <div ng-repeat="book in c.filteredBooks" class="card">
    <article class="card__content" ng-click="c.openBook(book.sys_id)">
      <div class="card__info-hover"></div>
      <div class="card__img">
        <img ng-src="{{ book.cover_image }}" alt="{{ book.title }} cover" class="card__img">
      </div>

      <a href="#" class="card__link">
        <div class="card__img--hover"></div>
      </a>
      <div class="card__info">
        <h4 class="card__title">{{ book.title }}</h4>
        <p class="card__author">{{ book.author }}</p>
        <p class="card__summary">{{ book.plot_summary }}</p>
      </div>
    </article>
  </div>
</div>

<!-- <pre>{{data.books | json}}</pre> -->]]></template>
    </sp_widget>
</record_update>
