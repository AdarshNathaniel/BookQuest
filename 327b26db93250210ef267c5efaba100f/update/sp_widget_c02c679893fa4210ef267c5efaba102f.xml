<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function() {  /* widget controller */  var c = this;};]]></client_script>
        <controller_as>c</controller_as>
        <css>@import url(https://fonts.googleapis.com/css?family=Dancing+Script:400,700);
@use postcss-nested;

body, html {
  height: 100%;
}

body {
  margin: 0;
  padding: 2rem;
  background-color: #7091E6; /* Updated color */
  font-family: monospace;
  color: #3D52A0; /* Updated color */
  overflow: hidden;
}

h1 {
  margin-top: 2rem;
  text-align: center;
}

h1 + p {
  text-align: center;
}

.shelf {
  position: relative;
  width: 30rem;
  height: 14rem;
  margin: 0 auto;
  border: 0.5rem solid #7091E6; /* Updated color */
  border-radius: 0.5rem;
  background-color: rgba(255, 255, 255, 0.1);
  perspective: 130rem;
  box-shadow: inset 0 0 2rem rgba(0, 0, 0, 0.2);
}

.door {
  position: absolute;
  width: 14.8rem;
  height: 14rem;
  display: flex;
  box-sizing: border-box;
  padding: 1rem;
  background-color: #3D52A0; /* Updated color */
  align-items: center;
  box-shadow: 0 1px 1px rgba(0, 0, 0, 0.3);
  outline: 1px solid transparent;

  &amp;::before {
    width: 1.5rem;
    height: 1.5rem;
    border-radius: 50%;
    background-color: rgba(0, 0, 0, 0.1);
    content: "";
  }

  &amp;.left {
    border-radius: 0 0.75rem 0.75rem 0;
    justify-content: flex-end;
    animation: 
      leftDoorOpen 3.5s ease-out forwards 1s,
      leftDoorFlap 15s linear infinite forwards 9s;
    transform-origin: 0 0 0;
  }

  &amp;.right {
    right: 0;
    border-radius: 0.75rem 0 0 0.75rem;
    animation: 
      rightDoorOpen 3s ease-out forwards 1.5s,
      rightDoorFlap 10s linear infinite forwards 8s;
    transform-origin: 100% 0 0;
  }
}

.book {
  position: absolute;
  box-sizing: border-box;
  padding: 0.8rem 4rem 0.8rem 2rem;
  border-radius: 0.25rem;
  background-color: rgba(255, 255, 255, 0.1);
  color: white;
  font-size: 1rem;
  text-transform: uppercase;
  letter-spacing: 0.1rem;
  cursor: pointer;
  box-shadow: inset 0 0 0.75rem rgba(255, 255, 255, 0.1);

  &amp;.home-page {
    transform: rotate(-90deg) translate(-12.4rem, 3rem);
    transform-origin: 0;
  }

  &amp;.about-us {
    transform: rotate(-100deg) translate(-13.4rem, 6.1rem);
    transform-origin: 0;
    outline: 1px solid transparent;
  }

  &amp;.contact {
    right: 2rem;
    bottom: 0.2rem;
    border-radius: 0.3rem 0 0 0.3rem;
  }

  &amp;.faq {
    right: 0.8rem;
    bottom: 3.3rem;
    border-radius: 0.3rem 0 0 0.3rem;
  }

  &amp;.not-found {
    width: 12rem;
    height: 3.5rem;
    border: 1px dashed rgba(255, 255, 255, 0.3);
    background-color: transparent;
    transform: rotate(-90deg) translate(-12rem, 13rem) scale(1);
    transform-origin: 0;
    cursor: default;
    animation: bookFadeOut 1s 3s infinite forwards;

    &amp;::after {
      display: block;
      width: 10rem;
      padding-left: 5rem;
      background-image: url("data:image/svg+xml;utf8,&lt;svg xmlns='http://www.w3.org/2000/svg' width='80' height='30'&gt;&lt;path fill='rgb(255, 255, 255)' d='M7.688,3.737C6.1,10.409,4.624,16.982,2.475,23.517c-0.424,1.29,0.724,2.338,1.957,1.916 c5.879-2.021,11.743-4.107,17.409-6.696c1.246-0.572,0.443-2.366-0.815-1.932c-3.856,1.333-7.695,2.69-11.565,3.959 c2.879-2.526,5.485-5.215,9.013-7.17c4.441-2.459,9.299-4.109,14.281-4.915c10.903-1.772,22.052,0.562,31.979,5.04 c9.241,4.162,12.895,8.725,13.164,4.942c0.121-1.69-5.57-4.953-14.125-8.714C53.19,5.292,41.094,3.539,29.636,6.058 c-7.122,1.567-16.708,5.374-22.064,11.544c1.359-4.455,2.461-9.028,3.032-13.563C10.852,2.091,8.12,1.927,7.688,3.737z'/&gt;&lt;/svg&gt;");
      background-repeat: no-repeat;
      background-size: 4rem;
      background-position: left center;
      font-family: "Dancing Script";
      text-transform: lowercase;
      font-size: 25px;
      content: "this page can't be found";
      transform: rotate(90deg) translate(6rem, -1rem);
      opacity: 0.3; 
    }
  }

  &amp;:hover:not(.not-found) {
    background-color: rgba(255, 255, 255, 0.2);
  }
}

@keyframes leftDoorOpen {
  60% {transform: rotateY(-115deg)}
  100% {transform: rotateY(-110deg)}
}

@keyframes rightDoorOpen {
  60% {transform: rotateY(125deg)}
  100% {transform: rotateY(120deg)}
}

@keyframes rightDoorFlap {
  0% { transform: rotateY(120deg)}
  5% {transform: rotateY(125deg)}
  15% {transform: rotateY(117deg)}
  25% {transform: rotateY(123deg)}
  30% {transform: rotateY(120deg)}
  100% {transform: rotateY(120deg)}
}

@keyframes leftDoorFlap {
  0% { transform: rotateY(-110deg)}
  5% {transform: rotateY(-115deg)}
  15% {transform: rotateY(-107deg)}
  25% {transform: rotateY(-113deg)}
  30% {transform: rotateY(-110deg)}
  100% {transform: rotateY(-110deg)}
}

@keyframes bookFadeOut {
  50% {border: 1px dashed rgba(255, 255, 255, 0.1);}
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>bq_404</id>
        <internal>false</internal>
        <link><![CDATA[function breakout(scope, elm) {

	elm = elm.contents();
	var canvas = $(elm).find('canvas')[0];

	var ctx = canvas.getContext("2d");
	var ballRadius = 10;
	var width = canvas.width;
	var height = canvas.height;
	var x = width/2;
	var y = height-30;
	var dx = 2;
	var dy = -2;
	var paddleHeight = 10;
	var paddleWidth = 75;
	var paddleX = (canvas.width-paddleWidth)/2;
	var rightPressed = false;
	var leftPressed = false;
	var brickRowCount = 15;
	var brickColumnCount = 7;
	var brickPadding = 2;
	var brickOffsetLeft = 10;
	var brickOffsetTop = 30;
	var brickWidth = (((width + brickPadding)-(brickOffsetLeft * 2)) / brickRowCount) - brickPadding;
	var brickHeight = 10;
	var score = 0;
	var lives = 3;
	var gameover = false;
	var maxPoints = 0;
	var color = "#428bca";
	var color2 = "#D1222B";
	var touchX,touchY;

	var bricks = [];
	for (var c=0; c<brickColumnCount; c++) {
		bricks[c] = [];
		for (var r=0; r<brickRowCount; r++) {
			bricks[c][r] = { x: 0, y: 0, status: 1 };
		}
	}

	// Spells out 404
	var letterMap = [];
	letterMap[0]=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14];
	letterMap[1]=[0,14];
	letterMap[2]=[0,2,4,6,7,8,10,12,14];
	letterMap[3]=[0,2,3,4,6,8,10,11,12,14];
	letterMap[4]=[0,4,6,7,8,12,14];
	letterMap[5]=[0,14];
	letterMap[6]=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14];

	document.addEventListener("keydown", keyDownHandler, false);
	document.addEventListener("keyup", keyUpHandler, false);
	document.addEventListener("mousemove", mouseMoveHandler, false);

	// React to touch events on the canvas
	canvas.addEventListener('touchstart', canvasTouchStart, false);
	canvas.addEventListener('touchmove', canvasTouchMove, false);

	function keyDownHandler(e) {
		if(e.keyCode == 39)
			rightPressed = true;
		else if(e.keyCode == 37)
			leftPressed = true;
	}
	function keyUpHandler(e) {
		if(e.keyCode == 39)
			rightPressed = false;
		else if(e.keyCode == 37)
			leftPressed = false;
	}
	function mouseMoveHandler(e) {
		var rect = canvas.getBoundingClientRect();
		var relativeX = e.clientX - rect.left;
		if(relativeX > 0 && relativeX < canvas.width) {
			paddleX = relativeX - paddleWidth/2;
		}
	}

	function canvasTouchStart() {
		getTouchPos();
		paddleX = touchX;
		event.preventDefault();
	}

	function canvasTouchMove(e) { 
		getTouchPos(e);
		paddleX = touchX;
		event.preventDefault();
	}

	function getTouchPos(e) {
		if (!e)
			var e = event;

		if(e.touches) {
			if (e.touches.length == 1) { // Only deal with one finger
				var touch = e.touches[0]; // Get the information for finger #1
				touchX=touch.pageX-touch.target.offsetLeft;
				touchY=touch.pageY-touch.target.offsetTop;
			}
		}
	}

	function collisionDetection() {
		for(c=0; c<brickColumnCount; c++) {
			for(r=0; r<brickRowCount; r++) {
				var b = bricks[c][r];
				if(b.status == 1) {
					if(x > b.x && x < b.x+brickWidth && y > b.y && y < b.y+brickHeight) {
						dy = -dy;
						b.status = 0;
						score++;
						if(score == maxPoints) {
							gameover = true;
							drawMessage("You Win");
						}
					}
				}
			}
		}
	}

	function drawBall() {
		ctx.beginPath();
		ctx.arc(x, y, ballRadius, 0, Math.PI*2);
		ctx.fillStyle = color2;
		ctx.fill();
		ctx.closePath();
	}

	function drawPaddle() {		
		ctx.beginPath();
		ctx.rect(paddleX, canvas.height-paddleHeight, paddleWidth, paddleHeight);
		ctx.fillStyle = color;
		ctx.fill();
		ctx.closePath();
	}

	function drawBricks() {
		maxPoints = 0;
		for(c=0; c<brickColumnCount; c++) {
			for(r=0; r<brickRowCount; r++) {

				if (!isMapped(c,r))
					continue;

				maxPoints++;

				if(bricks[c][r].status == 1) {
					var brickX = (r*(brickWidth+brickPadding))+brickOffsetLeft;
					var brickY = (c*(brickHeight+brickPadding))+brickOffsetTop;
					bricks[c][r].x = brickX;
					bricks[c][r].y = brickY;

					ctx.beginPath();
					ctx.rect(brickX, brickY, brickWidth, brickHeight);
					ctx.fillStyle = color;
					ctx.fill();
					ctx.closePath();

				}
			}
		}
	}

	function isMapped(c,r) {
		if (letterMap[c])
			return (letterMap[c].indexOf(r) > -1);
		return false;
	}

	function drawScore() {
		ctx.font = "16px Arial";
		ctx.fillStyle = color;
		ctx.textAlign = "left";
		ctx.fillText("Score: "+score, 8, 20);
	}

	function drawLives() {
		ctx.font = "16px Arial";
		ctx.fillStyle = color;
		ctx.fillText("Lives: "+lives, canvas.width-65, 20);
	}

	function drawMessage(text) {

		var loc = (canvas.width)/2;
		ctx.textAlign="center"; 
		ctx.font = "24px Arial";
		ctx.fillStyle = color2;
		ctx.fillText(text, loc, 150);
	}

	function draw() {
		ctx.clearRect(0, 0, canvas.width, canvas.height);
		drawBricks();
		drawBall();
		drawPaddle();
		drawScore();
		drawLives();
		collisionDetection();

		if (x + dx > canvas.width-ballRadius || x + dx < ballRadius)
			dx = -dx;

		if (y + dy < ballRadius)
			dy = -dy;
		else if(y + dy > canvas.height-ballRadius) {
			if(x > paddleX && x < paddleX + paddleWidth)
				dy = -dy;
			else {
				lives--;
				if(!lives) {
					gameover = true;
					drawMessage("Game Over");
				}
				else {
					x = canvas.width/2;
					y = canvas.height-30;
					dx = 3;
					dy = -3;
					paddleX = (canvas.width-paddleWidth)/2;
				}
			}
		}

		if(rightPressed && paddleX < canvas.width-paddleWidth)
			paddleX += 7;
		else if(leftPressed && paddleX > 0)
			paddleX -= 7;

		x += dx;
		y += dy;
		if (gameover==false)
			requestAnimationFrame(draw);
	}

	draw();
}]]></link>
        <name>BQ 404</name>
        <option_schema/>
        <public>true</public>
        <roles/>
        <script><![CDATA[(function() {  /* populate the 'data' object */  /* e.g., data.table = $sp.getValue('table'); */})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>harini.srija</sys_created_by>
        <sys_created_on>2024-06-11 09:10:29</sys_created_on>
        <sys_id>c02c679893fa4210ef267c5efaba102f</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>BQ 404</sys_name>
        <sys_package display_value="BookQuest" source="x_1383151_bkquest">327b26db93250210ef267c5efaba100f</sys_package>
        <sys_policy/>
        <sys_scope display_value="BookQuest">327b26db93250210ef267c5efaba100f</sys_scope>
        <sys_update_name>sp_widget_c02c679893fa4210ef267c5efaba102f</sys_update_name>
        <sys_updated_by>harini.srija</sys_updated_by>
        <sys_updated_on>2024-06-11 09:45:43</sys_updated_on>
        <template><![CDATA[<nav class="shelf">
  <a class="book home-page">Home page</a>
  <a class="book about-us">About us</a>
  <a class="book contact">Contact</a>
  <a class="book faq">F.A.Q.</a>
  
  <span class="book not-found"></span>
 
  <span class="door left"></span>
  <span class="door right"></span>
</nav>
<h1>Error 404</h1>
<p>The page you're loking for can't be found</p>
]]></template>
    </sp_widget>
</record_update>
