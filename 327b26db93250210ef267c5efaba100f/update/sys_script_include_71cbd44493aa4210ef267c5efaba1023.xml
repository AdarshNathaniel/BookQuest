<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_1383151_bkquest.BookFineCalculator</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>BookFineCalculator</name>
        <script><![CDATA[var BookFineCalculator = Class.create();
BookFineCalculator.prototype = {
    initialize: function() {},

    calculateFines: function() {
        // Retrieve the fine rate from system property, default to 5 if not set
        var fineRate = gs.getProperty('x_1383151_bkquest.fine_rate_per_day', '5');
        fineRate = parseFloat(fineRate);

        var gr = new GlideRecord('x_1383151_bkquest_borrow');
        var currentDate = new GlideDateTime(); // Get the current date and time
        gs.info("x_1383151_bkquest (BookFineCalculator): Starting fine calculation process at " + currentDate.getDisplayValue());

        gr.addQuery('due_date', '<', currentDate); // Find records where the due date is in the past
        gr.addQuery('fine_status', 'not paid'); // Only process fines that are not paid
        gr.addNullQuery('returned_date'); // Ensure the book has not been returned
        gr.query();

        while (gr.next()) {
            var dueDate = new GlideDateTime(gr.due_date);
            gs.info("x_1383151_bkquest (BookFineCalculator): Processing Book ID: " + gr.book_id + " with due date: " + dueDate.getDisplayValue());

            // Calculate the number of days overdue
            var overdueDays = Math.floor((currentDate.getNumericValue() - dueDate.getNumericValue()) / (1000 * 60 * 60 * 24));
            gs.info("x_1383151_bkquest (BookFineCalculator): Calculated overdue days: " + overdueDays);

            if (overdueDays > 0) {
                var fineAmount = (overdueDays * fineRate).toFixed(2); // Fine per overdue day, rounded to two decimal places
                gr.days_late = overdueDays;
                gr.fine_amount = fineAmount;
                gr.update();

                gs.info("x_1383151_bkquest (BookFineCalculator): Book ID: " + gr.book_id + " is overdue by " + overdueDays + " days. Fine amount updated to $" + fineAmount);
            } else {
                gs.info("x_1383151_bkquest (BookFineCalculator): Book ID: " + gr.book_id + " is not overdue.");
            }
        }

        gs.info("x_1383151_bkquest (BookFineCalculator): Fine calculation process completed.");
    },

    type: 'BookFineCalculator'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>harini.srija</sys_created_by>
        <sys_created_on>2024-05-28 13:12:45</sys_created_on>
        <sys_id>71cbd44493aa4210ef267c5efaba1023</sys_id>
        <sys_mod_count>6</sys_mod_count>
        <sys_name>BookFineCalculator</sys_name>
        <sys_package display_value="BookQuest" source="x_1383151_bkquest">327b26db93250210ef267c5efaba100f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="BookQuest">327b26db93250210ef267c5efaba100f</sys_scope>
        <sys_update_name>sys_script_include_71cbd44493aa4210ef267c5efaba1023</sys_update_name>
        <sys_updated_by>harini.srija</sys_updated_by>
        <sys_updated_on>2024-05-30 04:02:21</sys_updated_on>
    </sys_script_include>
</record_update>
